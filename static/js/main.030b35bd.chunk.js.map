{"version":3,"sources":["components/Display.js","components/Button.js","components/ButtonGrid.js","logic.js","components/App.js","index.js"],"names":["Display","props","displayRef","React","createRef","focusDisplay","bind","this","current","focus","onKeyDown","event","keyDownHandler","id","ref","contentEditable","value","Component","Button","onClick","buttonClickHandler","className","color","ButtonGrid","handleButtonClick","func","Calculator","args","reduce","previous","n","m","Math","PI","E","add","subtract","divide","x","multiply","calculate","str","trim","string","split","length","goodCharacters","chars","includes","char","hasBadCharacters","lastIndex","hasMisplacedSymbol","hasSyntaxError","join","symbols","temp","arr","i","indexOf","push","Number","forEach","index","String","a","b","addSubtract","multiplyDivide","symbolIndex","symbol","toArray","firstMulIndex","firstDivideIndex","symbolToFunc","y","ans","splice","calculateParenthesis","startIndex","endIndex","nOpen","nClose","replace","slice","symbolReplacements","e","toString","Ï€","pi","numbers","requiresChanges","Object","keys","reformat","App","state","displayValue","setDisplayValue","handleKeyDown","input","inputType","characters","oldDisplayValue","substring","setState","buttonValue","preventDefault","console","log","key","goodKeys","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.030b35bd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Display.css\";\r\n\r\nexport default class Display extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.displayRef = React.createRef();\r\n    this.focusDisplay = this.focusDisplay.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.focusDisplay();\r\n  }\r\n\r\n  focusDisplay() {\r\n    this.displayRef.current.focus();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <p\r\n        onKeyDown={(event) => this.props.keyDownHandler(event)}\r\n        id=\"component-Display\"\r\n        ref={this.displayRef}\r\n        contentEditable\r\n      >\r\n        {this.props.value}\r\n      </p>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nexport default function Button(props) {\r\n  return (\r\n    <button\r\n      onClick={() => props.buttonClickHandler(props.value)}\r\n      className={\"component-Button button-\" + props.color}\r\n      id={props.id}\r\n    >\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Button from \"./Button.js\";\r\nimport \"./ButtonGrid.css\";\r\n\r\nexport default class ButtonGrid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleButtonClick = this.handleButtonClick.bind(this);\r\n  }\r\n\r\n  handleButtonClick(func) {\r\n    this.props.buttonClickHandler(func);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"component-ButtonGrid\">\r\n        <div className=\"button-row\">\r\n          <Button\r\n            buttonClickHandler={this.handleButtonClick}\r\n            value=\"CE\"\r\n            color=\"grey-1\"\r\n          />\r\n          <Button\r\n            buttonClickHandler={this.handleButtonClick}\r\n            value=\"(\"\r\n            color=\"grey-1\"\r\n          />\r\n          <Button\r\n            buttonClickHandler={this.handleButtonClick}\r\n            value=\")\"\r\n            color=\"grey-1\"\r\n          />\r\n          <Button\r\n            buttonClickHandler={this.handleButtonClick}\r\n            value=\"Ã·\"\r\n            color=\"orange\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"button-row\">\r\n          <Button\r\n            buttonClickHandler={this.handleButtonClick}\r\n            value=\"7\"\r\n            color=\"grey-2\"\r\n          />\r\n          <Button\r\n            buttonClickHandler={this.handleButtonClick}\r\n            value=\"8\"\r\n            color=\"grey-2\"\r\n          />\r\n          <Button\r\n            buttonClickHandler={this.handleButtonClick}\r\n            value=\"9\"\r\n            color=\"grey-2\"\r\n          />\r\n          <Button\r\n            buttonClickHandler={this.handleButtonClick}\r\n            value=\"x\"\r\n            color=\"orange\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"button-row\">\r\n          <Button\r\n            buttonClickHandler={this.handleButtonClick}\r\n            value=\"4\"\r\n            color=\"grey-2\"\r\n          />\r\n          <Button\r\n            buttonClickHandler={this.handleButtonClick}\r\n            value=\"5\"\r\n            color=\"grey-2\"\r\n          />\r\n          <Button\r\n            buttonClickHandler={this.handleButtonClick}\r\n            value=\"6\"\r\n            color=\"grey-2\"\r\n          />\r\n          <Button\r\n            buttonClickHandler={this.handleButtonClick}\r\n            value=\"-\"\r\n            color=\"orange\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"button-row\">\r\n          <Button\r\n            buttonClickHandler={this.handleButtonClick}\r\n            value=\"1\"\r\n            color=\"grey-2\"\r\n          />\r\n          <Button\r\n            buttonClickHandler={this.handleButtonClick}\r\n            value=\"2\"\r\n            color=\"grey-2\"\r\n          />\r\n          <Button\r\n            buttonClickHandler={this.handleButtonClick}\r\n            value=\"3\"\r\n            color=\"grey-2\"\r\n          />\r\n          <Button\r\n            buttonClickHandler={this.handleButtonClick}\r\n            value=\"+\"\r\n            color=\"orange\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"button-row\">\r\n          <Button\r\n            buttonClickHandler={this.handleButtonClick}\r\n            value=\"0\"\r\n            color=\"grey-2\"\r\n            id=\"zero\"\r\n          />\r\n          <Button\r\n            buttonClickHandler={this.handleButtonClick}\r\n            value=\".\"\r\n            color=\"grey-2\"\r\n          />\r\n          <Button\r\n            buttonClickHandler={this.handleButtonClick}\r\n            value=\"=\"\r\n            color=\"orange\"\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/*\r\nThis is where all the magic happens.\r\nCalculator class is self explanatory, it is called by other functions \r\nto perform operations on Numbers.\r\n\r\nThe functions that follow revolve around one main string, the user input, which is passed to \r\ncalculate by the App component. This string is then iteratated over multiple times\r\nto perform the following steps: \r\n1) Return if string is empty\r\n2) Remove all spaces to make the string easier to translate into math\r\n3) Check for syntax errors\r\n4) Reformat the string to again make it easier to work with, for example changing adding a negative Number to subtraction\r\n5) Simplify the expression following the order of operations until one term remains (this is where the magic lies)\r\n\r\nNote from Devloper:\r\nHaving not gone into the details of any backend of calculator apps, I feel like this method\r\nmay be overkill. In any case, it was fun, and it has some cool recursion; most importantly, it works.\r\n*/\r\n\r\nclass Calculator {\r\n  static add(...args) {\r\n    return args.reduce((previous, current) => {\r\n      return previous + current;\r\n    });\r\n  }\r\n\r\n  static subtract(n, m) {\r\n    return n - m;\r\n  }\r\n\r\n  static multiply(...args) {\r\n    return args.reduce((previous, current) => {\r\n      return previous * current;\r\n    });\r\n  }\r\n\r\n  static divide(n, m) {\r\n    return n / m;\r\n  }\r\n\r\n  static get pi() {\r\n    return Math.PI;\r\n  }\r\n\r\n  static get e() {\r\n    return Math.E;\r\n  }\r\n\r\n  static get symbolToFunc() {\r\n    return {\r\n      \"+\": Calculator.add,\r\n      \"-\": Calculator.subtract,\r\n      \"/\": Calculator.divide,\r\n      x: Calculator.multiply,\r\n    };\r\n  }\r\n}\r\n\r\nfunction hasSyntaxError(string) {\r\n  const hasUnequalParentheses = (str) => {\r\n    // make sure occurences of open and closed paranthesis are of the same amount\r\n    if (str.split(\"(\").length - 1 !== str.split(\")\").length - 1) return true;\r\n    else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const hasBadCharacters = (str) => {\r\n    const goodCharacters = \"1234567890xÃ·/+-=Ï€().e \".split(\"\");\r\n    const badCharacters = [\r\n      \"+x\",\r\n      \"+/\",\r\n      \"-x\",\r\n      \"-/\",\r\n      \"xx\",\r\n      \"//\",\r\n      \"..\",\r\n      \"(x\",\r\n      \"(/\",\r\n      \"x)\",\r\n      \"/)\",\r\n      \"+)\",\r\n      \"-)\",\r\n    ];\r\n\r\n    for (const chars of badCharacters) if (str.includes(chars)) return true;\r\n    for (const char of str) if (!goodCharacters.includes(char)) return true;\r\n    return false;\r\n  };\r\n\r\n  const hasMisplacedSymbol = (str) => {\r\n    const badFirstCharacters = [\"x\", \"/\"];\r\n    const badLastCharacters = [\"x\", \"/\", \"-\", \"+\"];\r\n\r\n    for (const char of badFirstCharacters) if (str[0] === char) return true;\r\n\r\n    const lastIndex = str.length - 1;\r\n    for (const char of badLastCharacters)\r\n      if (str[lastIndex] === char) return true;\r\n  };\r\n\r\n  if (\r\n    hasUnequalParentheses(string) ||\r\n    hasBadCharacters(string) ||\r\n    hasMisplacedSymbol(string)\r\n  )\r\n    return true;\r\n\r\n  return false;\r\n}\r\n\r\nfunction reformat(string) {\r\n  const symbolReplacements = {\r\n    \"Ã·\": \"/\",\r\n    \"++\": \"+\",\r\n    \"--\": \"+\",\r\n    \"x+\": \"x\",\r\n    \"/+\": \"/\",\r\n    \"-+\": \"-\",\r\n    \"+-\": \"-\",\r\n    \")(\": \")x(\",\r\n    e: \"(\" + Calculator.e.toString() + \")\",\r\n    Ï€: \"(\" + Calculator.pi.toString() + \")\",\r\n  };\r\n\r\n  //Add x between adjacent parenthesis and numbers to indicate multiplication.\r\n  const numbers = \"0123456789\".split(\"\");\r\n  for (const n of numbers) {\r\n    symbolReplacements[n + \"(\"] = `${n}x(`;\r\n    symbolReplacements[\")\" + n] = `)x${n}`;\r\n  }\r\n\r\n  if (string[0] === \"+\") string = string.replace(\"+\", \"\");\r\n\r\n  let requiresChanges = true;\r\n  while (requiresChanges) {\r\n    //loop to replace any substrings that need replacement\r\n    for (const char of Object.keys(symbolReplacements)) {\r\n      if (string.indexOf(char) !== -1) {\r\n        string = string.replace(char, symbolReplacements[char]);\r\n      }\r\n    }\r\n\r\n    requiresChanges = false;\r\n\r\n    //loop to check for further changes\r\n    for (const char of Object.keys(symbolReplacements)) {\r\n      if (string.indexOf(char) !== -1) {\r\n        requiresChanges = true;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return string;\r\n}\r\n\r\nfunction calculateParenthesis(string) {\r\n  const startIndex = string.indexOf(\"(\");\r\n  if (startIndex === -1) return string; //return if expression has no parenthesis\r\n  const lastIndex = string.length - 1;\r\n\r\n  let endIndex;\r\n  let nOpen = 1;\r\n  let nClose = 0;\r\n  let i = startIndex + 1;\r\n  while (i <= lastIndex) {\r\n    if (string[i] === \"(\") nOpen++;\r\n    else if (string[i] === \")\") nClose++;\r\n\r\n    if (nOpen === nClose) {\r\n      endIndex = i;\r\n      string = string.replace(\r\n        string.slice(startIndex, endIndex + 1),\r\n        calculate(string.slice(startIndex + 1, endIndex))\r\n      );\r\n      string = calculateParenthesis(string);\r\n      break;\r\n    }\r\n    i++;\r\n  }\r\n\r\n  return string;\r\n}\r\n\r\nfunction multiplyDivide(string) {\r\n  if (string.indexOf(\"x\") === -1 && string.indexOf(\"/\") === -1) return string; // return if no x or / in expression\r\n\r\n  //convert string to array with elements of x, /, +, or a number\r\n  const toArray = (str) => {\r\n    const symbols = [\"x\", \"/\", \"+\"];\r\n    let temp = \"\";\r\n    const arr = [];\r\n    for (let i in str) {\r\n      if (symbols.indexOf(str[i]) !== -1) {\r\n        arr.push(temp);\r\n        temp = str[i];\r\n        arr.push(temp);\r\n        temp = \"\";\r\n      } else {\r\n        if (str[i] === \"-\") {\r\n          temp !== \"\" && arr.push(temp);\r\n          temp = \"-\";\r\n          continue;\r\n        }\r\n        temp += str[i];\r\n        Number(i) === str.length - 1 && arr.push(temp);\r\n      }\r\n    }\r\n\r\n    return arr;\r\n  };\r\n  let arr = toArray(string);\r\n\r\n  //find first occurence of multiplication or division and its index in array\r\n  let symbolIndex;\r\n  let symbol;\r\n\r\n  const [firstMulIndex, firstDivideIndex] = [\r\n    arr.indexOf(\"x\"),\r\n    arr.indexOf(\"/\"),\r\n  ];\r\n  if (firstMulIndex === -1) [symbolIndex, symbol] = [firstDivideIndex, \"/\"];\r\n  else if (firstDivideIndex === -1)\r\n    [symbolIndex, symbol] = [firstMulIndex, \"x\"];\r\n  // if it has both set variables to the one that occurs first\r\n  else\r\n    [symbolIndex, symbol] = [\r\n      firstMulIndex < firstDivideIndex ? firstMulIndex : firstDivideIndex,\r\n      firstMulIndex < firstDivideIndex ? \"x\" : \"/\",\r\n    ];\r\n\r\n  //get the terms before and after the symbol, perform corresponding operation on them, replace terms and symbol with ans.\r\n  const func = Calculator.symbolToFunc[symbol];\r\n  const [x, y] = [arr[symbolIndex - 1], arr[symbolIndex + 1]];\r\n  const ans = func(Number(x), Number(y));\r\n\r\n  arr.splice(symbolIndex - 1, 2);\r\n  arr[symbolIndex - 1] = String(ans);\r\n\r\n  return multiplyDivide(arr.join(\"\")); // recursion till no more multiplication and division in expression\r\n}\r\n\r\nfunction addSubtract(string) {\r\n  // create an array of positive or negative terms and combine all of them\r\n  const symbols = [\"-\", \"+\"];\r\n  let temp = \"\";\r\n  let arr = [];\r\n  for (let i in string) {\r\n    if (symbols.indexOf(string[i]) !== -1) {\r\n      if (temp === \"\") temp = string[i];\r\n      else {\r\n        arr.push(temp);\r\n        temp = string[i];\r\n      }\r\n    } else {\r\n      temp += string[i];\r\n      Number(i) === string.length - 1 && arr.push(temp);\r\n    }\r\n  }\r\n\r\n  arr.forEach(function (string, index) {\r\n    this[index] = Number(string);\r\n  }, arr);\r\n\r\n  if (arr.length === 1) return String(arr[0]);\r\n  else return String(arr.reduce((a, b) => a + b));\r\n}\r\n\r\nexport function calculate(str) {\r\n  if (str.trim() === \"\") return \"\";\r\n\r\n  //Replace spaces and division symbols.\r\n  str = str.split(\"Ã·\").join(\"/\");\r\n  str = str.split(\" \").join(\"\");\r\n\r\n  if (hasSyntaxError(str)) return \"Syntax Error\";\r\n  str = reformat(str);\r\n\r\n  str = calculateParenthesis(str);\r\n  str = multiplyDivide(str);\r\n  str = addSubtract(str);\r\n\r\n  if (str === \"Infinity\") return \"Math Error\";\r\n  if (str === \"NaN\") return \"Error\";\r\n  return str;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Display from \"./Display.js\";\r\nimport ButtonGrid from \"./ButtonGrid.js\";\r\nimport \"./App.css\";\r\nimport { calculate } from \"../logic.js\";\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      displayValue: \"0\",\r\n    };\r\n\r\n    this.setDisplayValue = this.setDisplayValue.bind(this);\r\n    this.handleButtonClick = this.handleButtonClick.bind(this);\r\n    this.handleKeyDown = this.handleKeyDown.bind(this);\r\n    this.displayRef = React.createRef(); // reference to Display component\r\n  }\r\n\r\n  setDisplayValue(input) {\r\n    const characters = \"1234567890.()\".split(\"\"); // Any key not present in array will not render to Display\r\n\r\n    const oldDisplayValue = this.state.displayValue;\r\n\r\n    let displayValue =\r\n      oldDisplayValue.trim() === \"0\" || oldDisplayValue.indexOf(\"Error\") !== -1\r\n        ? \"\"\r\n        : oldDisplayValue;\r\n\r\n    let inputType;\r\n    /* \r\n    inputType possible values (used to determine how display will be manipulated):\r\n    'clear' when CE button is clicked\r\n    'equals' when Enter is pressed or = button is clicked\r\n    'backspace' when backspace is is pressed\r\n    'character' when a valid character's button is clicked or pressed\r\n    'operation' on characters that resemble mathematical operations\r\n    undefined when none of the above, in which case view will not change.\r\n    */\r\n\r\n    if (input === \"CE\") inputType = \"clear\";\r\n    else if (input === \"=\" || input === \"Enter\") inputType = \"equals\";\r\n    else if (characters.indexOf(input) !== -1) inputType = \"character\";\r\n    else if (input === \"Backspace\") inputType = \"backspace\";\r\n    else inputType = \"operation\";\r\n\r\n    switch (inputType) {\r\n      case \"character\":\r\n        displayValue += input;\r\n        break;\r\n\r\n      case \"operation\":\r\n        switch (input) {\r\n          case \"-\":\r\n            const symbols = [\"-\", \"+\", \"x\", \"/\", \"Ã·\"];\r\n\r\n            if (symbols.indexOf(displayValue.trim().slice(-1)) !== -1) {\r\n              displayValue += input;\r\n            } else {\r\n              displayValue += ` ${input} `;\r\n            }\r\n            break;\r\n\r\n          default:\r\n            displayValue += ` ${input} `;\r\n            break;\r\n        }\r\n        break;\r\n\r\n      case \"clear\":\r\n        displayValue = \"0\";\r\n        break;\r\n\r\n      case \"equals\":\r\n        /* \r\n        Magic is done on the string,\r\n        a valid answer is returned, or 'Syntax Error', or 'Math Error',  or 'Error' when we dont know what happened\r\n        go to logic.js for implementation details \r\n        */\r\n        displayValue = calculate(displayValue);\r\n        break;\r\n\r\n      case \"backspace\":\r\n        displayValue = displayValue.substring(0, displayValue.length - 1);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n    // Display will only update when key pressed is not a bad character\r\n    inputType &&\r\n      this.setState({\r\n        displayValue: displayValue,\r\n      });\r\n  }\r\n\r\n  // called by Button on click\r\n  handleButtonClick(buttonValue) {\r\n    this.setDisplayValue(buttonValue);\r\n    this.displayRef.current.focusDisplay();\r\n  }\r\n\r\n  // called by Display on key down\r\n  handleKeyDown(event) {\r\n    event.preventDefault(); // Browser behavior will be affected until more efficient method is found.\r\n    console.log(event.key);\r\n    const goodKeys = \"1234567890xÃ·/+-.()\".split(\"\");\r\n    goodKeys.push(\"Enter\", \"Backspace\");\r\n    if (goodKeys.indexOf(event.key) !== -1) {\r\n      this.setDisplayValue(event.key);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"App\">\r\n        {/* <Navbar /> */}\r\n        <Display\r\n          keyDownHandler={this.handleKeyDown}\r\n          ref={this.displayRef} // Reference lift up to return focus to Display after Button clicks\r\n          value={this.state.displayValue}\r\n        />\r\n        <ButtonGrid buttonClickHandler={this.handleButtonClick} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}